/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-03-24 04:48:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String contextPath = request.getContextPath();

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<!-- Bootstrap 5 버전 -->\r\n");
      out.write("	<!-- https://getbootstrap.com/docs/5.0/getting-started/introduction/ -->\r\n");
      out.write("	<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js\" integrity=\"sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("	<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js\" integrity=\"sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("	\r\n");
      out.write("	<!-- jQuery 는 학습용으로 사용하는 것으로 위 Bootstrap 5는 더이상 아래의 jQuery 를 필요로 하지 않는다. -->\r\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.6.0.js\" integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script src=\"//cdn.jsdelivr.net/npm/alertifyjs@1.12.0/build/alertify.min.js\"></script>\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/alertifyjs@1.12.0/build/css/alertify.min.css\"/>\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/alertifyjs@1.12.0/build/css/themes/default.min.css\"/>\r\n");
      out.write("	<title>회원 가입</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<br>\r\n");
      out.write("<br>\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<div class=\"mb-3 d-flex justify-content-center\">\r\n");
      out.write("	  		<h1 class=\"display-4\">삐따기 세상</h1>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"mb-3\">\r\n");
      out.write("			<h2>Register</h2>\r\n");
      out.write("		</div>\r\n");
      out.write("		<form novalidate>\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <label for=\"userName\">User Name:</label>\r\n");
      out.write("                <input type=\"text\" class=\"form-control\" id=\"userName\" placeholder=\"Enter userName\" name=\"userName\" required>\r\n");
      out.write("                <div class=\"valid-feedback\">Valid.</div>\r\n");
      out.write("                <div class=\"invalid-feedback\">Please fill out this field.</div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <label for=\"userPassword\">Password:</label>\r\n");
      out.write("                <input type=\"password\" class=\"form-control\" id=\"userPassword\" placeholder=\"Enter password\" name=\"userPassword\" required>\r\n");
      out.write("                <div class=\"valid-feedback\">Valid.</div>\r\n");
      out.write("                <div class=\"invalid-feedback\">1개 이상의 특수문자, 대소문자 및 숫자를 포함하고 8자리 이상이여야 합니다.</div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <label for=\"userPassword2\">Password Confirm:</label>\r\n");
      out.write("                <input type=\"password\" class=\"form-control\" id=\"userPassword2\" placeholder=\"Confirm password\" name=\"userPassword2\" required>\r\n");
      out.write("                <div class=\"valid-feedback\">Valid.</div>\r\n");
      out.write("                <div class=\"invalid-feedback\">Please fill out this field.</div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"mb-3\">\r\n");
      out.write("                <label for=\"userEmail\">Email:</label>\r\n");
      out.write("                <input type=\"text\" class=\"form-control\" id=\"userEmail\" placeholder=\"Enter email\" name=\"userEmail\" required>\r\n");
      out.write("                <div class=\"valid-feedback\">Valid.</div>\r\n");
      out.write("                <div class=\"invalid-feedback\">Please fill out this field.</div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("		<div>\r\n");
      out.write("			<button id=\"btnRegister\" class=\"btn btn-primary\">가입</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("	\r\n");
      out.write("    $(\"#userName\").focus();\r\n");
      out.write("\r\n");
      out.write("    // manually check\r\n");
      out.write("    $(\"#userName\").blur(function () {\r\n");
      out.write("        if (validateUserName($(this))) {\r\n");
      out.write("            $(this).removeClass(\"is-invalid\").addClass('is-valid');\r\n");
      out.write("        } else {\r\n");
      out.write("            $(this).removeClass(\"is-valid\").addClass('is-invalid');\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $(\"#userPassword\").blur(function () {\r\n");
      out.write("        if (validatePassword($(this))) {\r\n");
      out.write("            $(this).removeClass(\"is-invalid\").addClass('is-valid');\r\n");
      out.write("        } else {\r\n");
      out.write("            $(this).removeClass(\"is-valid\").addClass('is-invalid');\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $(\"#userPassword2\").blur(function () {\r\n");
      out.write("        if (validatePassword2($(this))) {\r\n");
      out.write("            $(this).removeClass(\"is-invalid\").addClass('is-valid');\r\n");
      out.write("        } else {\r\n");
      out.write("            $(this).removeClass(\"is-valid\").addClass('is-invalid');\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $(\"#userEmail\").blur(function () {\r\n");
      out.write("        if (validateEmail($(this))) {\r\n");
      out.write("            $(this).removeClass(\"is-invalid\").addClass('is-valid');\r\n");
      out.write("        } else {\r\n");
      out.write("            $(this).removeClass(\"is-valid\").addClass('is-invalid');\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $(':input').focus(function () {\r\n");
      out.write("        $(this).removeClass('is-valid is-invalid');\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("	//submit\r\n");
      out.write("    $(\"#btnRegister\").click(function(){\r\n");
      out.write("        if( $(\"form\").find(\".is-invalid\").length > 0 ){\r\n");
      out.write("            alert(\"입력이 올바르지 않습니다.\")\r\n");
      out.write("        }else{\r\n");
      out.write("        	register();\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function validateUserName(userName) {\r\n");
      out.write("    if (userName.val().length >= 4) return true;\r\n");
      out.write("    else return false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function validatePassword(userPassword) {\r\n");
      out.write("	let userPasswordValue = userPassword.val();\r\n");
      out.write("\r\n");
      out.write("	var patternEngAtListOne = new RegExp(/[a-zA-Z]+/);// + for at least one\r\n");
      out.write("	var patternSpeAtListOne = new RegExp(/[~!@#$%^&*()_+|<>?:{}]+/);// + for at least one\r\n");
      out.write("	var patternNumAtListOne = new RegExp(/[0-9]+/);// + for at least one\r\n");
      out.write("	\r\n");
      out.write("	if( patternEngAtListOne.test( userPasswordValue ) \r\n");
      out.write("			&& patternSpeAtListOne.test( userPasswordValue )  \r\n");
      out.write("			&& patternNumAtListOne.test( userPasswordValue )\r\n");
      out.write("			&& userPasswordValue.length >= 8\r\n");
      out.write("	){\r\n");
      out.write("		return true;\r\n");
      out.write("	}\r\n");
      out.write("    else return false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function validatePassword2(userPassword2) {\r\n");
      out.write("    if (userPassword2.val() == $(\"#userPassword\").val()) return true;\r\n");
      out.write("    else return false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function validateEmail(userEmail) {\r\n");
      out.write("    // ^ 시작일치, $ 끝 일치\r\n");
      out.write("    // {2, 3} 2개 ~ 3개\r\n");
      out.write("    // * 0회 이상, + 1회 이상\r\n");
      out.write("    // [-_.] - 또는 _ 또는 .\r\n");
      out.write("    // ? 없거나 1회\r\n");
      out.write("    let regexp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n");
      out.write("    if (regexp.test(userEmail.val())) return true;\r\n");
      out.write("    else return false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function register() {\r\n");
      out.write("      $.ajax({\r\n");
      out.write("         type : 'post',\r\n");
      out.write("         url : '");
      out.print(contextPath);
      out.write("/register',\r\n");
      out.write("         dataType : 'json',\r\n");
      out.write("         data : {\r\n");
      out.write("            userName : $(\"#userName\").val(),\r\n");
      out.write("            userEmail : $(\"#userEmail\").val(),\r\n");
      out.write("            userPassword : $(\"#userPassword\").val()\r\n");
      out.write("         },\r\n");
      out.write("         success : function(data, status, xhr) { // alertify or another welcome page 이동\r\n");
      out.write("        	 \r\n");
      out.write("        	 console.log(data.result);\r\n");
      out.write("         	\r\n");
      out.write("        	 if( data.result == \"success\" ){\r\n");
      out.write("				alertify.alert('Welcome!', '회원가입을 축하합니다. 로그인 페이지로 이동합니다.', function(){\r\n");
      out.write("					window.location.href=\"");
      out.print( contextPath);
      out.write("/jsp/login.jsp\";\r\n");
      out.write("				});\r\n");
      out.write("			}else{\r\n");
      out.write("				alertify.error('회원가입에 문제가 생겼습니다.');\r\n");
      out.write("				console.log(xhr);\r\n");
      out.write("			}\r\n");
      out.write("         },\r\n");
      out.write("         error : function(jqXHR, textStatus, errorThrown) {\r\n");
      out.write("        	 alert(\"서버 오류!!\");\r\n");
      out.write("			console.log(jqXHR);\r\n");
      out.write("         }\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("   }\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
