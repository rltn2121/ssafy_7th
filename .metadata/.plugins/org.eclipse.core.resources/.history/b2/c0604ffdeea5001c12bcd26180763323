package ps_java;


import java.io.*;
import java.util.*;

/*
 *
moveLeft
5
2 0 2 4 2
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
 
moveRight
5
2 4 2 0 2
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
 
 moveUp
5
2 0 0 0 0
0 0 0 0 0
2 0 0 0 0
4 0 0 0 0
2 0 0 0 0

 moveDown
5
2 0 0 0 0
4 0 0 0 0
2 0 0 0 0
0 0 0 0 0
2 0 0 0 0
 
 */
public class b_12100 {
	static int N;
	static int arr[][];
	public static void main(String[] args) throws Exception{
		input();
		moveLeft();
//		moveRight();
//		moveUp();
//		moveDown();
		return;
		
	}
	
	static void moveLeft() {
		for(int row = 0; row<N; row++) {
			for(int col = 1; col<N; col++) {
				if(arr[row][col] == 0) continue;
				int ny = col-1;
				
				// 잠시 빼놓기
				int temp = arr[row][col];
				arr[row][col] = 0;
				while(true) {
					// 벽 만나면 멈춤
					if(ny == -1) {
						arr[row][ny+1] = temp;
						break;
					}
					
					// 다른 숫자 만나도 멈춤
					if(arr[row][ny] != temp && arr[row][ny] != 0) {
						arr[row][ny+1] = temp;
						break;
					}
					
					// 같은 숫자 만나면 합치기
					else if(arr[row][ny] == temp) {
						arr[row][ny] *=2;
					}
					ny--;
				}
			}
		}
	}
	static void moveRight() {
		for(int row = 0; row<N; row++) {
			for(int col = N-2; col>=0; col--) {
				if(arr[row][col] == 0) continue;
				int ny = col+1;
				
				// 잠시 빼놓기
				int temp = arr[row][col];
				arr[row][col] = 0;
				while(true) {
					// 벽 만나면 멈춤
					if(ny == N) {
						arr[row][ny-1] = temp;
						break;
					}
					
					// 다른 숫자 만나도 멈춤
					if(arr[row][ny] != temp && arr[row][ny] != 0) {
						arr[row][ny-1] = temp;
						break;
					}
					
					// 같은 숫자 만나면 합치기
					else if(arr[row][ny] == temp) {
						arr[row][ny] *=2;
					}
					ny++;
				}
			}
		}
	}	
	static void moveUp() {
		for(int col = 0; col<N; col++) {
			for(int row = 1; row<N; row++) {
				if(arr[row][col] == 0) continue;
				int nx = row-1;
				
				// 잠시 빼놓기
				int temp = arr[row][col];
				arr[row][col] = 0;
				while(true) {
					// 벽 만나면 멈춤
					if(nx == -1) {
						arr[nx+1][col] = temp;
						break;
					}
					
					// 다른 숫자 만나도 멈춤
					if(arr[nx][col] != temp && arr[nx][col] != 0) {
						arr[nx+1][col] = temp;
						break;
					}
					
					// 같은 숫자 만나면 합치기
					else if(arr[nx][col] == temp) {
						arr[nx][col] *=2;
					}
					nx--;
				}
			}
		}
	}	
	static void moveDown() {
		for(int col = 0; col<N; col++) {
			for(int row = N-2; row>=0; row--) {
				if(arr[row][col] == 0) continue;
				int nx = row+1;
				
				// 잠시 빼놓기
				int temp = arr[row][col];
				arr[row][col] = 0;
				while(true) {
					// 벽 만나면 멈춤
					if(nx == N) {
						arr[nx-1][col] = temp;
						break;
					}
					
					// 다른 숫자 만나도 멈춤
					if(arr[nx][col] != temp && arr[nx][col] != 0) {
						arr[nx-1][col] = temp;
						break;
					}
					
					// 같은 숫자 만나면 합치기
					else if(arr[nx][col] == temp) {
						arr[nx][col] *=2;
					}
					nx--;
				}
			}
		}
	}
	
	static void input() throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		arr = new int[N][N];
		for(int i = 0; i<N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for(int j = 0; j<N; j++)
				arr[i][j] = Integer.parseInt(st.nextToken());
		}
	}
}	
