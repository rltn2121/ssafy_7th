
public class kakao2022blind_k진수에서소수개수구하기 {
	
	static boolean notPrime[];
	public static String decToK(int n, int k) {
		StringBuilder sb = new StringBuilder();
		
		while(n>=k) {
			int temp = n % k;
			sb.append(temp);
			n/=k;
		}
		sb.append(n);
		String str_rev = sb.toString();
		String ret = "";
		for(int i = str_rev.length()-1; i>=0; i--)
			ret+=str_rev.charAt(i);
		return ret;
	}
	
	public static int isPrime(int n) {
		return (!notPrime[n] ? 1 : 0);
	}
	public static void eratos(int n) {
		notPrime = new boolean[n+1];
		notPrime[1] = true;
		
		for(int i = 2; i<=Math.sqrt(n); i++) {
			if(notPrime[i]) continue;
			
			for(int j = i+i; j<=Math.sqrt(n); j+=i)
				notPrime[j] = true;
		}
	}
	
	public static int solution(int n, int k) {
		int answer = 0;
	        
        // 1. 진법 변환
		String str = decToK(n,k);
		
		// 2. 소수 판별
//		eratos(Integer.parseInt(str));
		eratos(40000000);

		// 3. 계산
        boolean zero = false;


        int len = str.length();
        String temp = "";
        for(int i = 0; i<len; i++) {
        	char c = str.charAt(i);
        	if(c=='0') {
        		if(temp.equals("")) continue;
        		int num = Integer.parseInt(temp);
//              P0 -> 0 안만나고 0 도착
        		if(!zero) {
        			answer += isPrime(num);
        			zero = true;
        		}
//              0P0 -> 0 만나고 0 도착
        		else {
        			answer += isPrime(num);
        		}
        		temp = "";
        	}
        	else
        		temp+=c;
        }
        
        if(!temp.equals("")) {
        	   int num = Integer.parseInt(temp);
//             0P  -> 0 만나고 끝 도착
               if(!zero) {
               	answer += isPrime(num);
               } 
               
//             P  -> 0 안만나고 끝 도착
               else {
               	answer += isPrime(num);
               }
        }
     
        return answer;
   }
  
	public static void main(String[] args) {
		for(int i = 1; i<=1000000; i++) {
			for(int k = 3; k<=10; k++) {
				System.out.println(solution(i, k));
			}
		}
	}
}
