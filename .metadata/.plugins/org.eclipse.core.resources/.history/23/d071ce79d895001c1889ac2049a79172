package ps_java;


import java.io.*;
import java.util.*;

public class b_16236 {
	static Queue<Info> q = new ArrayDeque<Info>();
	static Info shark;
	static int N, ans;
	static int dx[] = {-1,0,1,0};
	static int dy[] = {0,1,0,-1};
	static ArrayList<Point> fishes[] = new ArrayList[7];
	static ArrayList<Point> eatable = new ArrayList<Point>();
	public static void main(String[] args) throws Exception{
		input();
		
		q.add(shark);
		if(fishes[1].size() == 0) {
			System.out.println(0);
			return;
		}
		
		for(Point fish : fishes[1])
			eatable.add(fish);
		
		while(!q.isEmpty()) {
			int cnt = q.size();
			while(cnt-- > 0) {
				Info now = q.poll();
				int[][] map = now.map;
				
				int x = now.x;
				int y = now.y;
				int size = now.size;
				
			}
			ans++;
		}
		
		
		
		System.out.println(ans);
	}
	
	
	static int[][] copyMap(int[][] input){
		int ret[][] = new int[N][N];
		for (int i = 0; i < ret.length; i++) {
			for (int j = 0; j < ret.length; j++) {
				ret[i][j] = input[i][j];
			}
		}
		return ret;
	}
	
	static Point findTarget(Info info) {
		ArrayList<Point> list = new ArrayList<Point>;
		
		int[][] map = info.map;
		int size = info.size;
		for(int i = 0; i<N; i++) {
			for(int j = 0; j<N; j++) {
				if(map[i][j] < size)
					list.add(new Point(i,j));
			}
		}
		
		int x = info.x;
		int y = info.y;
		
		Collections.sort(list, (a,b) -> (getDist(x,a.x,y,a.y) == getDist(x,b.y,y,b.y) ? 
				(a.x==b.x?(a.y-b.y) : a.x-b.x) : getDist(x,a.x,y,a.y) - getDist(x,b.y,y,b.y)));
		
		
	}

	static int getDist(int x1, int y1, int x2, int y2) {
		return Math.abs(x1-x2) + Math.abs(y1-y2);
	}
	static void input() throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		for(int i = 1; i<=6; i++)
			fishes[i] = new ArrayList<Point>();
		
		N = Integer.parseInt(br.readLine());
		int[][] arr = new int[N][N];
		for(int i = 0; i<N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine(), " ");
			for(int j = 0; j<N; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
				if(arr[i][j] == 0) continue;
				if(arr[i][j] == 9) {
					shark = new Info(i,j,2, arr);
					arr[i][j] = 0;
				}
				else 
					fishes[arr[i][j]].add(new Point(i,j));
			}
		}
		br.close();
	}
	
	static class Info{
		int x;
		int y;
		int size;
		int[][] map;
		public Info(int x, int y, int size, int[][] map) {
			this.x = x;
			this.y = y;
			this.size = size;
			this.map = map;
		}
	}
	
	static class Point{
		int x;
		int y;
		public Point(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
}	
